from abc import abstractmethod
from .option import Option
from .base import OptionCommandLine, InputGeneratorCommandLine
import input

class Exploit(OptionCommandLine):
	def __init__(self):
		super(Exploit, self).__init__()
		self.options = self.get_options()

	def help_input(self):
		print("implement this")

	#todo - this is messy :( clean up!
	def do_input(self, args):
		split_args = args.split()

		data_type = None
		name = None
		if len(split_args) == 1:
			name = split_args[0]
			if name == 'string' or name == 'int':
				self.help_input()
				return
		elif len(split_args) == 2:
			data_type = split_args[0]
			name = split_args[1]
		else:
			self.help_input()
			return

		options = input.Generator.get(name)
		if not options:
			InputGeneratorCommandLine.start_instance(name, data_type)
			options = input.Generator.get(name)

		if options['data_type'] == 'string':
			self.input = input.StringGenerator(options)
		elif options['data_type'] == 'int':
			self.input = input.IntGenerator(options)

		self.input_options = options

	def do_options(self, args):
		super(Exploit, self).do_options(args)
#		print(self.input_options)

	def do_run(self, args):
		self.run(self.input, self.options)

	@abstractmethod
	def run(self, generator, options):
		pass

	@abstractmethod
	def get_options(self):
		pass

	@abstractmethod
	def start_instance(self):
		pass

