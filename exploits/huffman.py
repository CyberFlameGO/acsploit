from input import Generator
from acsploit import Exploit, Option
import math

class HuffmanExploit(Exploit):
	@staticmethod
	def start_instance():
		prompt = HuffmanExploit()
		prompt.prompt = "exploit(huffman)$ "
		prompt.cmdloop("Exploit Huffman. Type \'options\' for current settings")

	def get_options(self):
		return dict({
			'ascending' : Option('ascending', 'bool', True),
			'n_inputs' : Option('n_inputs', 'int', 10)
			 })

	def run(self, generator, options):
		print(self.exploit(generator, options['n_inputs'].value))

	def exploit(self, generator, n_inputs):
		characters = ""
		n = generator.get_min_value()[0]  # presumably something like 'a,' needs to be a character
		count = 1
		while (len(characters) + self.fib(count)) < n_inputs:
			characters = characters + (n * self.fib(count))
			n = generator.get_greater_than(n)
			if len(n) > 1:
				break
			count += 1
		return characters

	def fib(self, n):
		return int(((1 + math.sqrt(5)) ** n - (1 - math.sqrt(5)) ** n) / (2 ** n * math.sqrt(5)))

