import math
from options import Options


# TODO - add option to optimize for filesize or huffman tree depth
options = Options()
options.add_option('direction', 'ascending', 'The sort direction of the tree?????', ['ascending', 'descending'])
options.add_option('n_inputs', 10, 'Number of inputs to generate')


def run(generator, output):
    output.output([exploit(generator, options['n_inputs'])])


def exploit(generator, n_inputs):
    characters = ''
    n = generator.get_min_value()[0]  # presumably something like 'a,' needs to be a character
    count = 1
    while (len(characters) + fib(count)) < n_inputs:
        characters += n * fib(count)
        n = generator.get_greater_than(n)
        if len(n) > 1:
            break
        count += 1
    return characters


def fib(n):
    return int(((1 + math.sqrt(5)) ** n - (1 - math.sqrt(5)) ** n) / (2 ** n * math.sqrt(5)))

