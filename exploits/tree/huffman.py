import math
from options import Options


class huffman():
    # TODO - add option to optimize for filesize or huffman tree depth
    options = Options()
    options.add_option('ascending', True, 'True or False')
    options.add_option('n_inputs', 10, 'Number of inputs to generate')

    def run(self, generator):
        print self.exploit(generator, self.options['n_inputs'])

    def exploit(self, generator, n_inputs):
        characters = ''
        n = generator.get_min_value()[0]  # presumably something like 'a,' needs to be a character
        count = 1
        while (len(characters) + self.fib(count)) < n_inputs:
            characters += n * self.fib(count)
            n = generator.get_greater_than(n)
            if len(n) > 1:
                break
            count += 1
        return characters

    def fib(self, n):
        return int(((1 + math.sqrt(5)) ** n - (1 - math.sqrt(5)) ** n) / (2 ** n * math.sqrt(5)))

