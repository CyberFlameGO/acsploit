import logging
from options import Options


class heap():
    options = Options()
    options.add_option('operation', 'create', 'One of (create, insert)')
    options.add_option('n_elements', 10, 'Number of elements in heap')
    options.add_option('type', 'max', 'One of (max, min) for max-heap or min-heap')

    def run(self, generator):
        op = self.options['operation']
        if op == 'create':
            if self.options['type'] == 'max':
                print self.ascending_list(generator, self.options['n_elements'])
            elif self.options['type'] == 'min':
                print self.descending_list(generator, self.options['n_elements'])
            else:
                logging.error('Not a valid option for \'type\'.')
                return
        elif op == 'insert':
            logging.warning('Not implemented yet :(')
            return
        else:
            logging.error('Not a valid option for \'operation\'.')
            return

    def descending_list(self, generator, numnodes):
        output = [generator.get_max_value()]
        for i in range(1,numnodes):
            output.append(generator.get_less_than(output[i-1]))
        return output

    def ascending_list(self, generator, numnodes):
        output = [generator.get_min_value()]
        for i in range(1,numnodes):
            output.append(generator.get_greater_than(output[i-1]))
        return output
