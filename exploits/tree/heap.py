class heap():

    options = {
        'operation': 'create',
        'n_elements': 10,
        'type' : 'max'}
    descriptions = {
        'operation': 'One of create or insert.',
        'n_elements': 'Number of elements in heap.',
        'type' : 'One of max or min (for max-heap or min-heap).'}

    def run(self, generator):
        op = self.options['operation']
        if op == 'create':
            if self.options['type'] == 'max':
                print self.ascending_list(generator, int(self.options['n_elements']))
            elif self.options['type'] == 'min':
                print self.descending_list(generator, int(self.options['n_elements']))
            else:
                print 'Not a valid option for \'type\'.'
                return
        elif op == 'insert':
            print 'Not implemented yet :('
            return
        else:
            print 'Not a valid option for \'operation\'.'
            return

    def descending_list(self, generator, numnodes):
        output = [generator.get_max_value()]
        for i in range(1,numnodes):
            output.append(generator.get_less_than(output[i-1]))
        return output

    def ascending_list(self, generator, numnodes):
        output = [generator.get_min_value()]
        for i in range(1,numnodes):
            output.append(generator.get_greater_than(output[i-1]))
        return output
