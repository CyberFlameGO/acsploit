import math
from options import Options


options = Options()
options.add_option('type', 'points_on_hull', 'For now, only points_on_hull')
options.add_option('n_inputs', 10, 'Number of points to generate')


def run(generator, output):
    # if options['type'] == 'points_on_hull':
    if generator.INPUT_NAME != 'int':
        raise ValueError("Only numeric input allowed for generating points on hull")
    output.output(jarvis(generator, options['n_inputs']))


# Jarvis march is 2D implementation of gift wrapping algorithm
def jarvis(generator, n_inputs):
    # Generate n points on a polygon, to force all points to lie on a hull -> worse case O(n^2)
    x0 = y0 = (generator.get_max_value() + generator.get_min_value()) / 2.0  # center of circle at middle of input
    radius = (generator.get_max_value() - generator.get_min_value()) / 2.0  # largest radius to ensure unique points
    angles = [float(i) / n_inputs * 2 * math.pi for i in range(n_inputs)]  # evenly space angles from 0 -> 2pi
    points = [(int(x0 + radius * math.cos(theta)), int(y0 + radius * math.sin(theta))) for theta in angles]

    return points
