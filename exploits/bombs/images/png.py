from .deflate import max_deflate_png
from options import Options

options = Options()
options.add_option('width', 225000, 'Desired width of uncompressed png in pixels')
options.add_option('height', 225000, 'Desired height of uncompressed png in pixels')

DESCRIPTION = 'Produces a PNG that expands immensely when loaded in RAM (eg by a browser or other application)'


# NOTE: We looked at using the pypng library for this instead of the custom deflate code
# While the png code is significantly simpler, it also takes significantly longer to run
# This is owing to the fact that the png library uses zlib for compression, whereas the custom
# implementation knows the input is all zero bytes and writes out the compressed data directly

def run(generator, output):
    if output.OUTPUT_NAME == "file" and output.options["format"] != "binary":
        raise ValueError("Only binary files are supported for output.")

    ret = max_deflate_png(options['width'], options['height'])
    output.output([ret])
