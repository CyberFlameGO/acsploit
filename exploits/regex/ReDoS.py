from options import Options


options = Options()
options.add_option('regex', 'your_regex', 'Regex to exploit, if vulnerable')
options.add_option('length', 25, 'Size of exploit string, if regex is vulnerable')

DESCRIPTION = 'Exploits regex that are vulnerable to catastrophic backtracking (ReDoS).' \
              '\n\n  ' \
              'Given a regex, it is first checked to see if it is vulnerable to ReDoS attack. There are two checks: ' \
              'if it is vulnerable to an exponential attack, or a quadratic attack. Exponential attacks have a much ' \
              'more significant effect with a shorter string length, whereas a quadratic attack likely needs a larger ' \
              'string length to have an effect. Once it is determined that a regex is vulnerable, a string is output ' \
              'that when matched against the regex, will result in a large amount of resources needed to determine if ' \
              'the string matches (and will likely never finish). The larger the exploit string length, the longer this ' \
              'will take. Algorithms used are from "Static Detection of DoS Vulnerabilities in Programs that use Regular ' \
              'Expressions", by Wustholz, Olivo, Heule, and Dillig.'

NO_INPUT = True
DEFAULT_OUTPUT = 'stdout'


def run(output):
    # will eventually call out to our actual methods, in a different file
    output.output(["dummy"])
