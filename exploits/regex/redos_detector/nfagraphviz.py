from graphviz import Digraph


class NFAGraphViz:

    counter = 0

    def __init__(self, nfa):
        self.nfa = nfa

    def show_graph(self):
        g = Digraph("NFA_graph" + str(NFAGraphViz.counter),
                    filename="NFA_graph" + str(NFAGraphViz.counter), format='png')
        NFAGraphViz.counter = NFAGraphViz.counter + 1
        g.attr('node', label="")

        for n in self.nfa['states']:
            if n in self.nfa['accepting_states'] and n not in self.nfa['initial_states']:
                g.node(str(n), str(n), shape='doublecircle')
            elif n not in self.nfa['accepting_states'] and n in self.nfa['initial_states']:
                g.node(str(n), str(n), shape='octagon')
            elif n in self.nfa['accepting_states'] and n in self.nfa['initial_states']:
                g.node(str(n), str(n), shape='doubleoctagon')
            else:
                g.node(str(n), str(n), shape='circle')

        for (transition_start_node, transition_character), destinations in self.nfa['transitions'].items():
            for d in destinations:
                g.edge(str(transition_start_node), str(d),
                       label='SPACE' if transition_character == ' ' else str(transition_character))
        g.view(cleanup=True)
