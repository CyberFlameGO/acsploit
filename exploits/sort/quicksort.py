from options import Options


options = Options()
options.add_option('type', 'mid', 'One of (mid, lomuto, hoare')
options.add_option('n_inputs', 10, 'Number of elements to sort')


def run(generator, output):
    if options['type'] in ['lomuto', 'hoare']:
        # Worst case for Lomuto and Hoare quicksort is already sorted.
        output.output(ascending_list(generator, options['n_inputs']))
    elif options['type'] == 'quicksortmid':
        # worst case for quicksort with midpoint pivots radiates from the center
        output.output(radiate_list(generator, options['n_inputs']))


def ascending_list(generator, n_inputs):
    return list(reversed(descending_list(generator, n_inputs)))


def descending_list(generator, n_inputs):
    output = [generator.get_random()]  # pick random value for now, need to check range in future

    for i in range(1, n_inputs):
        output.append(generator.get_less_than(output[i-1]))

    return output


def radiate_list(generator, n_inputs):
    # generates the worst case list for quicksort with midpoint pivots (rounded to the left)
    reverseorderedlist = descending_list(generator, n_inputs)  # Start with a reverse-sorted list
    output = [None] * len(reverseorderedlist)
    k = len(reverseorderedlist)-1
    print(k)
    for i in range(0, len(reverseorderedlist)):
        if i % 2 == 0:
            output[int(k-(i/2))] = reverseorderedlist[i]
        else:
            output[int((i-1)/2)] = reverseorderedlist[i]
    return output