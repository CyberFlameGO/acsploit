from options import Options

options = Options()
options.add_option('library', "zxcvbn", 'The library you are targetting for worst-case passwords (either zxcvbn or nbvcxz).',['zxcvbn', 'nbvcxz'])
options.add_option('length', 100, 'Length of password')

# Examples taken from Linear Programming: Klee-Minty Examples
# by KONSTANTINOS PAPARRIZOS, NIKOLAOS SAMARAS, and DIMITRIOS ZISSOPOULOS

DESCRIPTION = 'Produces a worst-case input for the zxcvbn password validation algorithm, targetting 1337 character replacement.'

NO_INPUT = True
LEETCHARS="4@8({[<3691!|170$5%2" # We Found that by utilizing ALL leet characters, some zxcvbn implementations take longer to process the password
NBVCXZ="4@8({[</369&#!1/|0$5+7%2/" #This may not be precisely the worst case, it's unclear what role some of the other matchers play in extending the length

def run(output):  # generates worst case input to the classic simplex algorithm (as shown by Klee and Minty)
    ret = generate_password(options['library'], options['length'])
    output.output([ret])

def repeat_to_length(string_to_expand, length):
    return (string_to_expand * (int(length/len(string_to_expand))+1))[:length]

def generate_password(type,length):
    if type=="zxcvbn":
        password=repeat_to_length(LEETCHARS,length)
    elif type == "nbvcxz" :
        password=repeat_to_length(NBVCXZ, length)
    return password