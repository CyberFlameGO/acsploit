from input import Generator
from acsploit import Exploit, Option

class TreeExploit(Exploit):
	@staticmethod
	def start_instance():
		prompt = TreeExploit()
		prompt.prompt = "exploit(tree)$ "
		prompt.cmdloop("Exploit Trees. Type \'options\' for current settings") #This is shown when the CLI is first opened
		# And hopefully their algorithms at some point

	def get_options(self):
		return dict({
			'type'	   : Option('type', 'string', ''),
			'n_inputs' : Option('n_inputs', 'int', 10)
			})

	def run(self, generator, options):
		t = options['type'].value
		if t == "binary":
			print(self.sorted_list(generator, options['n_inputs'].value))
		elif t == "avl":
			pass
		elif t == "b":
			pass
		elif t == "red-black":
			pass

	def sorted_list(self, generator, n_inputs):
		output = [generator.get_max_value()]
		for i in range(1, n_inputs):
			output.append(generator.get_less_than(output[i - 1]))
		return output