from options import Options


class boyer_moore():
    options = Options()
    options.add_option('pattern_length', 5, 'Length of pattern to search')
    options.add_option('string_length', 10, 'Length of string to search in')

    def run(self, generator, output):
        ret = [(self.all_same_match(generator, self.options['string_length'], self.options['pattern_length']))]
        output.output(ret)

    def no_match(self, generator, string_length, pattern_length):  # For if you want to not match the pattern
        base = generator.get_min_value()[0]
        pattern = pattern_length * base
        k = int(string_length/pattern_length)
        whole = k * (pattern[:-1] + generator.get_max_value()[0]) + base * (string_length % pattern_length)
        return 'String: ' + str(whole) + '\nSearch Pattern: ' + pattern

    # Worst case for Rabin-Karp, Knuth-Moore-Pratt and Boyer-Moore
    def all_same_match(self, generator, string_length, pattern_length):
        base = generator.get_min_value()[0]
        whole = base * string_length
        pattern = base * pattern_length
        return 'String: ' + whole + '\nSearch pattern: ' + pattern
