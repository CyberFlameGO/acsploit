class knuth_moore_pratt():

    options = {
        'pattern_length': 5,
        'string_length': 10}
    descriptions = {
        'pattern_length': 'Length of pattern to search.',
        'string_length': 'Length of string to search in.'}

    def run(self, generator):
        print (self.AllSameMatch(generator, int(self.options['string_length']), int(self.options['pattern_length'])))

    def NoMatch(self, generator, string_length, pattern_length):  # For if you want to not match the pattern
        base = generator.get_min_value()[0]
        pattern = pattern_length*base
        k = int(string_length/pattern_length)
        whole = k * (pattern[:-1] + generator.get_max_value()[0]) + base * (string_length%pattern_length)
        return 'String: ' + str(whole) + '\nSearch Pattern: ' + pattern

    # Worst case for Rabin-Karp, Knuth-Moore-Pratt and Boyer-Moore
    def AllSameMatch(self, generator, string_length, pattern_length):
        base = generator.get_min_value()[0]
        whole = base * string_length
        pattern = base * pattern_length
        return 'String: ' + whole + '\nSearch pattern: ' + pattern
