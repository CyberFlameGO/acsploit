from options import Options


class md5():
    f = None
    n = -1
    options = Options()
    options.add_option('n_collisions', 10, 'Number of collisions to create')
    options.add_option('bits', 32, 'Something for md5 (???)')
    options.add_option('length', 10, 'Length of desired unhashed strings')
    options.add_option('hash_table_size', 100, 'Size of target hash table')

    def run(self, generator, output):
        self.f = eval('hashlib.' + self.options['type'])  # TODO: this should check to make sure the function exists
        self.n = int(self.options['bits']/4)
        output.outout(self.exploit(generator, self.options['n_collisions']))
    
    def exploit(self, generator, n_inputs):
        keys = []
        hash_pairs = dict()  # hash -> key
        hashes = set()
        generated = set()
        hash_f = self.hash_function

        # Currently can only generate multiple pairs of keys that generate the same hash
        while len(keys) < n_inputs:
            current_value = generator.get_random()
            hash = hash_f(current_value)

            while hash not in hashes:
                hash_pairs[hash] = current_value
                generated.add(current_value)
                hashes.add(hash)
                find_val = generator.get_random()
                while find_val in generated:
                    find_val = generator.get_random()
                current_value = find_val
                hash = hash_f(current_value)
            keys.append(current_value)
            keys.append(hash_pairs[hash_f(current_value)])

        return keys

    def hash_function(self, key):
        h = self.f

        return h(repr(key).encode('utf-8')).hexdigest()[:self.n]  # this is wrong
