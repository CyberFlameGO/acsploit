import z3


def _ascii_printable(x):
    return z3.And(0x20 <= x, x <= 0x7e)  # enforces that byte is printable ascii


def _generate_ascii_printable_string(base_name, size, solver):
    # establishes z3 variable names for bytes of the input string
    bytes = [z3.BitVec('%s%d' % (base_name, i), 8) for i in range(size)]
    # adds the constraint that the bytes are printable ascii
    solver.add(z3.And([_ascii_printable(byte) for byte in bytes]))
    return bytes


def _str_to_BitVecVals8(string):  # transforms the target string into z3 BitVecVals
    return [z3.BitVecVal(ord(x), 8) for x in string]


def get_collisions(hash_func, target, length, n_collisions, hash_table_size, *args):
    ret = []
    s = z3.Solver()
    # houses the z3 variables for the potential hash match
    res = _generate_ascii_printable_string('res', length, s)
    # enforces the z3 constraint that the hash matches the hash of the target string
    s.add(hash_func(res, hash_table_size, *args) == hash_func(_str_to_BitVecVals8(target), hash_table_size, *args))
    count = 0
    # z3 isn't stateful; you have to run it again and again while adding constraints to ignore previous solutions
    while s.check() == z3.sat and count < n_collisions:
        x = s.model()  # This is a z3 solution
        y = ''.join(chr(x[i].as_long()) for i in res)
        ret.append(y)
        count += 1
        # add constraints
        s.add(z3.Or([r != x[r] for r in res]))
        if count >= n_collisions:
            return ret  # exit after you have enough collisions
    # raises this exception when you can't find any more solutions
    raise ValueError('Could not find enough solutions')