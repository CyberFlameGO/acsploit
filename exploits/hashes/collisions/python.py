import random
from options import Options

options = Options()
options.add_option('n_collisions', 10, 'Number of colliding strings to create')
options.add_option('hash_table_size', 2**32, 'Size of target hash table')
options.add_option('target_type', 'preimage', 'Whether the target is an image (hash output) or preimage (hash input)',
                   ['image', 'preimage'])
options.add_option('target', 'hello', 'Image or preimage of desired hash value')

DESCRIPTION = 'Produces hash collisions for the Python string hash function'

DEFAULT_INPUT = 'char'

ALPHANUMERIC = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'


def run(generator, output):
    # given a target hash and string length
    # generate random strings of three characters and reverse them out of the hash value
    # make a lookup table of from the resulting semi-hash values to the strings
    # generate random length-3 strings and partially hash them
    # if the result is in the hash table, concat the three chars there onto the end of the string to get a collision
    # a meet-in-the-middle brute force attack!
    if options['target_type'] == 'preimage':
        target = hash(options['target'])
    else:
        target = options['target']
    pass


def hash(preimage):
    x = ord(preimage[0]) << 7
    for char in preimage:
        x = (1_000_003 * x) ^ ord(char)
        x %= 2**64
    x ^= len(preimage)
    return x


def hash_backwards(target, preimage_len, table_size, chars=3):
    # 'reverse' the given number of characters out of the target hash
    # uses random characters and returns a table from the semi-computed hashes
    # to the generated strings of characters
    table = {}

    for _ in range(table_size):
        semi_hash = target
        # TODO: use the generator or make this a NO_INPUT exploit
        string = ''
        for _ in range(chars):
            string += random.choice(ALPHANUMERIC)

        # XOR out the length
        semi_hash ^= preimage_len
        # undo each character
        for char in reversed(string):
            semi_hash ^= char
            semi_hash *= 368933774672867  # ring inverse of 1_000_003 % 2 ** 64
            semi_hash %= 2**64

        table[semi_hash] = string

    return table
