from input import Generator
from acsploit import Exploit, Option

class StrCompareExploit(Exploit):
    @staticmethod
    def start_instance():
        prompt = StrCompareExploit()
        prompt.prompt = "exploit(strcompare)$ "
        prompt.cmdloop("Exploit String Comparison Algorithms. Type \'options\' for current settings")

    def get_options(self):
        return dict({
            'n_inputs' : Option('n_inputs', 'int', 10)
        })

    def run(self, generator, options):
        print(self.RabinKarp(generator, options['n_inputs'].value))

    # TODO: Check for other algorithms here
    def RabinKarp(self, generator, n_inputs):
        # TODO: should be able to generate single characters without hard coding - more important for graphs than here
        base = generator.get_min_value()[0]
        whole = base * n_inputs
        pattern = base * int(n_inputs / 2)
        return "String: " + whole + "\n\nSearch pattern: " + pattern
