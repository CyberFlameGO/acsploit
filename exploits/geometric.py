from input import Generator
from acsploit import Exploit, Option
import random
import math

class GeometricExploit(Exploit):
	@staticmethod
	def start_instance():
		prompt = GeometricExploit()
		prompt.prompt = "exploit(geometric)$ "
		prompt.cmdloop("Exploit Geometric Algorithms. Type \'options\' for current settings") #This is shown when the CLI is first opened

	def get_options(self):
		return dict({
			'type'	   : Option('type', 'string', 'points_on_hull'),
			'n_inputs' : Option('n_inputs', 'int', 10)
			})

	def run(self, generator, options):
		#if options['type'] == "points_on_hull":
		print(self.jarvis(generator, options['n_inputs'].value))

	def jarvis(self, generator, n_inputs):
		# Generate n points on a polygon, to force all points to lie on a hull -> worse case O(n^2)
		angles = []
		points = []
		x0 = y0 = (generator.get_max_value() + generator.get_min_value()) / 2
		R = generator.get_random() / 2  # Need to be very careful with getting random (could go out of bounds)
		for n in range(n_inputs):
			angles.append(random.random() * 2 * math.pi)

		list.sort(angles)

		for n in range(n_inputs):
			x = x0 + R * math.cos(angles[n])
			y = y0 + R * math.sin(angles[n])
			points.append((int(x), int(y)))

		return points