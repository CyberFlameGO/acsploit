from input import Generator
from acsploit import Exploit, Option

class SortExploit(Exploit):
	@staticmethod
	def start_instance():
		prompt = SortExploit()
		prompt.prompt = "exploit(sort)$ "
		prompt.cmdloop("Exploit Sorting Algorithms. Type \'options\' for current settings")

	def get_options(self):
		return dict({'ascending' : Option('ascending', 'bool', True), 
			'n_inputs' : Option('n_inputs', 'int', 10)})

	def run(self, generator, options):
		if options['ascending'].value:
			# Worst case for ascending sorting algorithm is a descending list
			print(self.descending_list(generator, options['n_inputs'].value))
		else:
			print(self.ascending_list(generator, options['n_inputs'].value))

	def ascending_list(self, generator, n_inputs):
		return list(reversed(self.descending_list(generator, n_inputs)))

	def descending_list(self, generator, n_inputs):
		output = [generator.get_random()] # pick random value for now, need to check range in future

		for i in range(1,n_inputs):
			output.append(generator.get_less_than(output[i-1]))     

		return output

