# TODO: Fix weighted, undirected graph
from options import Options


options = Options()
options.add_option('directed', False, 'True or False')
options.add_option('weighted', False, 'True or False')
options.add_option('n_inputs', 10, 'Number of nodes in graph')

def run(generator, output):
    output.output(exploit(generator, options['n_inputs'], options['directed']))

def exploit(generator, n_inputs, directed):
    G = {}
    possible_nodes = []
    n = generator.get_min_value()
    for i in range(n_inputs):
        possible_nodes.append(n)
        G[n] = set()
        n = generator.get_greater_than(n)
    for i in range(n_inputs):
        for n in range(n_inputs):
            if not directed:
                if possible_nodes[i] not in G[possible_nodes[n]]:
                    G[possible_nodes[i]].add(possible_nodes[n])
            else:
                G[possible_nodes[i]].add(possible_nodes[n])
    formatted_output = ''
    for node in G:
        formatted_output += (str(node) + ': ')
        first = True
        for connection in G[node]:
            if first:
                formatted_output += str(connection)
                first = False
            else:
                formatted_output += (', ' + str(connection))
        formatted_output += '\n'
    G = formatted_output

    return G
