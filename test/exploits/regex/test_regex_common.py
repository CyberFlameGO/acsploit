from exploits.regex.regex_common import RegexParser
from delayed_assert import expect, assert_expectations
import pytest

def test_nfa_parser():

    test_cases = [
        ('a*', ['a', 'aaaaaa', ''], ['aba', 'b', 'aaaaaaaaaab']),
        ('a*b', ['ab', 'aaaaaab', 'b'], ['aba', 'ba', 'aaaaaaacaab']),
        ('[abc]', ['a', 'b', 'c'], ['ac', 'ba', '']),
        ('[a-c]', ['a', 'b', 'c'], ['ac', 'ba', '']),
        ('a|b|c', ['a', 'b', 'c'], ['ac', 'ba', '']),
        ('(a|b|c)d', ['ad', 'bd', 'cd'], ['ac', 'ba', 'd']),
        ('(a|b|ab)*c', ['ac', 'bc', 'c', 'abc', 'ababc', 'aaaaaaaac', 'bbbbbbbc', 'aaaaabababbbbbc'],
         ['', 'ba', 'd']),
        ('a?', ['a', '', ''], ['ac', 'ba', 'd']),
        ('a+', ['aa', 'a', 'aaaaaaa'], ['', 'ac', 'ba', 'd']),
        ('a+b', ['aab', 'ab', 'aaaaaaab'], ['a', '', 'ac', 'ba', 'd']),
        ('[^abc]', ['d', 'e', '1', '.', '[', '*', '?'], ['', 'a', 'b', 'c', 'dd']),
        ('[^a-c]', ['d', 'e', '1', '.', '[', '*', '?'], ['', 'a', 'b', 'c', 'dd']),
        ('[-ab]', ['-', 'a', 'b'], ['', 'd', 'ab', '-a']),
        ('[ab-]', ['-', 'a', 'b'], ['', 'd', 'ab', '-a']),
        ('[^-ab]', ['3', 'd', 'h'], ['', 'a', 'b', '-', '-a']),
        ('[^ab-]', ['3', 'd', 'h'], ['', 'a', 'b', '-', '-a']),
        ('\+', ['+'], ['', 'a', 'b', '-', '-a']),
        ('.', ['a', 'b', 'c', 'd'], ['', 'ab', 'aaa']),
        ('[.+]', ['.', '+'], ['', 'a', 'aaa']),
    ]

    for test_case in test_cases:
        parser = RegexParser()
        nfa = parser.run(test_case[0])
        for success in test_case[1]:
            expect(RegexParser.match_string(nfa, success))
        for failure in test_case[2]:
            expect(not RegexParser.match_string(nfa, failure))
    assert_expectations()

def test_empty_character_class():
    parser = RegexParser()
    with pytest.raises(ValueError):
        parser.run('[]')


def test_empty_negation_character_class():
    parser = RegexParser()
    with pytest.raises(ValueError):
        parser.run('[^]')


def test_dangling_plus():
    parser = RegexParser()
    with pytest.raises(ValueError):
        parser.run('+')


def test_dangling_star():
    parser = RegexParser()
    with pytest.raises(ValueError):
        parser.run('*')


def test_dangling_question():
    parser = RegexParser()
    with pytest.raises(ValueError):
        parser.run('?')
