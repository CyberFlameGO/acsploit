from exploits.regex import redos
from test.exploits.dummy_output import DummyOutput
import pytest


def test_run_redos_wikipedia_vuln1():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '(a+)+x'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = True
    redos.run(output)
    assert len(output) == 1


def test_run_redos_wikipedia_vuln2():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '([a-zA-Z]+)*\.'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = True
    redos.run(output)
    assert len(output) == 1


def test_run_redos_wikipedia_vuln3():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '(a|aa)+[A-Z0-9]'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = True
    redos.run(output)
    assert len(output) == 1
    assert output[0] == 'a' * length


def test_run_redos_wikipedia_vuln4():
    output = DummyOutput()
    length = 30
    redos.options['regex'] = '[0-5]{7}_(a|a?)+5'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = True
    redos.run(output)
    assert len(output) == 1
    print(output[0])
    for i in range(7):
        assert (int(output[0][i]) >= 0) and (int(output[0][i]) <= 5)
    assert output[0][7:] == '_' + ('a' * (length - 8))


def test_run_redos_wikipedia_vuln6():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '(([a-z])+.)+[A-Z]([a-z])+'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = False
    redos.run(output)
    assert len(output) == 1


def test_run_redos_wikipedia_vuln7():
    output = DummyOutput()
    length = 50
    redos.options['regex'] = '([a-zA-Z0-9])(([-.]|[_]+)?([a-zA-Z0-9]+))*(@){1}[a-z0-9]+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-z]{2,3}))'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = False
    redos.run(output)
    assert len(output) == 1


def test_run_redos_stackoverflow():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '((ab)*)+\\'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = True
    redos.run(output)
    assert len(output) == 1


def test_run_redos():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '(a|b|ab)*c'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = True
    redos.run(output)
    assert len(output) == 1
    assert len(output[0]) == length
    assert output[0] == 'ab' * (length // len('ab'))


def test_run_redos_quadratic():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '(a|b)*(a|c)*d'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = True
    redos.run(output)
    assert len(output) == 1
    assert len(output[0]) == length
    assert output[0] == 'a' * length


def test_run_redos_quadratic_but_excluding_quadratic():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '(a|b)*(a|c)*d'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = False
    with pytest.raises(ValueError):
        redos.run(output)


def test_run_redos_no_vulnerability():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '(a|b)*c'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = True
    with pytest.raises(ValueError):
        redos.run(output)


def test_run_redos_longer_length():
    output = DummyOutput()
    length = 100
    redos.options['regex'] = '(a|b|ab)*c'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = True
    redos.run(output)
    assert len(output) == 1
    assert len(output[0]) == length
    assert output[0] == 'ab' * (length // len('ab'))


def test_run_redos_no_vulnerability_exponential_missing_terminator():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '(a|b|ab)*'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = False
    with pytest.raises(ValueError):
        redos.run(output)


def test_run_redos_no_vulnerability_quadratic_missing_terminator():
    output = DummyOutput()
    length = 10
    redos.options['regex'] = '(a|b)*(a|c)*'
    redos.options['max_length'] = length
    redos.options['show_nfa'] = False
    redos.options['include_quadratic'] = True
    with pytest.raises(ValueError):
        redos.run(output)
