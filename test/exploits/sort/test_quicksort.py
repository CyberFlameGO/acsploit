import math
from exploits.sort import quicksort
from test.exploits.dummy_output import DummyOutput
from input.ints import IntGenerator


def test_run_mid():
    output = DummyOutput()
    n_inputs = 11
    quicksort.options['n_inputs'] = n_inputs
    quicksort.options['type'] = 'mid'
    quicksort.run(IntGenerator(), output)
    assert len(output) == n_inputs
    expected_value = 255 - 1
    for i in range(n_inputs // 2):
        assert output[i] == expected_value
        expected_value -= 2
    expected_value = 255
    for i in range(1, 1 + math.ceil(n_inputs / 2)):
        assert output[-i] == expected_value
        expected_value -= 2


def test_run_more_items():
    output = DummyOutput()
    n_inputs = 111
    quicksort.options['n_inputs'] = n_inputs
    quicksort.options['type'] = 'mid'
    quicksort.run(IntGenerator(), output)
    assert len(output) == n_inputs
    expected_value = 255 - 1
    for i in range(n_inputs // 2):
        assert output[i] == expected_value
        expected_value -= 2
    expected_value = 255
    for i in range(1, 1 + math.ceil(n_inputs / 2)):
        assert output[-i] == expected_value
        expected_value -= 2


def test_run_lomuto():
    output = DummyOutput()
    n_inputs = 11
    quicksort.options['n_inputs'] = n_inputs
    quicksort.options['type'] = 'lomuto'
    quicksort.run(IntGenerator(), output)
    assert len(output) == n_inputs
    for i, j in enumerate(output):
        assert j == i + 1 + (255 - n_inputs)


def test_run_hoare():
    output = DummyOutput()
    n_inputs = 11
    quicksort.options['n_inputs'] = n_inputs
    quicksort.options['type'] = 'hoare'
    quicksort.run(IntGenerator(), output)
    assert len(output) == n_inputs
    for i, j in enumerate(output):
        assert j == i + 1 + (255 - n_inputs)
